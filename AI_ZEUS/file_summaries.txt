AI_ZEUS/.gitignore: Specifies intentionally untracked files that Git should ignore (e.g., __pycache__/, venv/, logs/, todos.db).
AI_ZEUS/README.md: Introduces the "UMHH Super Sonic AI Agent â€“ ZEUS Lightning Edition", describes its features (self-evolving, plugin loader, self-upgrading, demo plugins, to-do list skill), lists usage commands for the to-do skill and plugins, and provides instructions on how to run the main application (python main.py).
AI_ZEUS/automation/automation_mesh.py: Defines DummyAutomator (a placeholder for task automation) and AutomationMesh (manages and executes automation steps within a plan). It seems to be a basic framework for automating sequences of operations.
AI_ZEUS/compute/compute_fabric.py: Defines DummyBackend (a placeholder for a computation backend) and ComputeFabric (manages and dispatches tasks to available backends, with a default dummy backend). This suggests a system for offloading or managing computational tasks.
AI_ZEUS/config/settings.yaml: Contains configuration settings for the application, such as oauth_secret, max_requests, and log_level.
AI_ZEUS/core/meta_orchestrator.py: Defines MetaOrchestrator, the central class that coordinates the different components of the AI agent (persona, skills, memory, automation, etc.). It processes input, plans actions using skills, executes them, stores interactions, and has a placeholder for self-improvement.
AI_ZEUS/core/zeus_strike_loader.py: Implements ZeusStrikeLoader, a dynamic plugin loader. It discovers Python files in a plugins directory, loads classes named Skill from them, allows reloading plugins, and can fetch new skills from GitHub. It executes skill methods in a separate thread.
AI_ZEUS/main.py: The main entry point of the application. It initializes all core components (PersonaManager, SkillTree, MetaOrchestrator, etc.), creates a "Zeus" persona, and then demonstrates various functionalities like adding, listing, marking done, and removing to-dos, as well as running plugin skills ("flash" and "strike").
AI_ZEUS/memory/omniscient_memory.py: Defines OmniscientMemory, a simple key-value store (using a dictionary) for storing interactions (presumably input, plan, and results). It uses a hash of the interaction as the key.
AI_ZEUS/personas/persona_manager.py: Defines Persona (represents an AI personality with specialties) and PersonaManager (manages different personas and interprets input based on the chosen persona's context).
AI_ZEUS/plugins/flash_task.py: A demo plugin named "flash_task". Its Skill class has an execute method that records the execution time of a simple operation and returns a formatted string with the result and duration.
AI_ZEUS/plugins/strike_of_lightning.py: Another demo plugin named "strike_of_lightning". Its Skill class has an execute method that returns a fixed string indicating an "instant action."
AI_ZEUS/requirements.txt: Lists Python package dependencies for the project. Currently, it only contains "requests".
AI_ZEUS/security/security_core.py: Defines SecurityCore with placeholder methods for auditing the orchestrator and enforcing policies. It suggests a component responsible for security aspects of the AI.
AI_ZEUS/setup_ai_zeus.bat: A Windows batch script for creating the basic directory structure and empty files for the AI ZEUS project.
AI_ZEUS/setup_ai_zeus_full.bat: A more comprehensive Windows batch script that not only creates the project structure but also populates all the Python and configuration files with initial code and content.
AI_ZEUS/skills/skill_tree.py: Defines DummySkill (a placeholder skill) and SkillTree. SkillTree manages available skills (including a ToDoSkill and dynamically loaded plugins via ZeusStrikeLoader). It's responsible for planning a sequence of actions based on user intent by mapping intents to specific skills and their methods.
AI_ZEUS/skills/todo_skill.py: Implements ToDoSkill, which manages a to-do list. It supports adding, listing, marking as done, and removing to-do items. To-dos are persisted to a JSON file (todo_data.json).
AI_ZEUS/ui/ui_hub.py: Defines UIHub with a simple render method that prints data to the console, prefixed with "[SuperSonic UI]". This acts as a basic interface for displaying results.
AI_ZEUS/world/world_connector.py: Defines WorldConnector, which seems intended to manage connections to external systems or APIs. It has methods to connect to services and send data, but the implementation is basic.
